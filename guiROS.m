% % PT VERSION
% % function guiROS(imageTable, outputDir)
% % % GUIROS - Interface gr√°fica para an√°lise de imagens de Reactive Oxygen Species (ROS)
% % %
% % %   Visualiza√ß√£o interativa com pain√©is dedicados:
% % %     - Imagem Original
% % %     - Overlays: ROS total e ROS difuso
% % %     - Terminal de output embutido
% % %     - Bot√µes de Parar e Executar an√°lise estat√≠stica em Python
% % %
% % % INPUTS:
% % %   imageTable : tabela com metadados das imagens
% % %   outputDir  : diret√≥rio para guardar os resultados
% % %
% % % AUTHOR:
% % %   Ferreira, M. - FCUL-IST, 2025
% % 
% % screenSize = get(0, 'ScreenSize');
% % % GUI Parameters
% % hFig = figure('Name', 'ROS Analysis Viewer', 'NumberTitle', 'off', ...
% %     'MenuBar', 'none', 'ToolBar', 'none', ...
% %     'Color', [0.07 0.07 0.07], ...
% %     'Position', screenSize, ...
% %     'Units', 'pixels');
% % % GUI Parameters
% % 
% % handles = struct();
% % handles.stopFlag = false;
% % guidata(hFig, handles);
% % 
% % %% Layout Panels
% % 
% % % Top-left: Imagem Original
% % axOrig = axes('Parent', hFig, 'Units', 'normalized', ...
% %     'Position', [0.05 0.55 0.4 0.4]);
% % title(axOrig, 'Imagem Original', 'Color', 'w');
% % 
% % % Right Panel: Overlays ROS (total e difuso)
% % axOverlay = axes('Parent', hFig, 'Units', 'normalized', ...
% %     'Position', [0.5 0.2 0.45 0.75]);
% % title(axOverlay, 'Overlays ROS', 'Color', 'w');
% % 
% % % Bottom-left: Control Panel
% % uipanelControls = uipanel('Parent', hFig, 'Title', 'Controlo', ...
% %     'FontSize', 10, 'ForegroundColor', 'w', ...
% %     'BackgroundColor', [0.15 0.15 0.15], ...
% %     'Units', 'normalized', 'Position', [0.05 0.05 0.4 0.4]);
% % 
% % % Bot√£o: Parar
% % uicontrol(uipanelControls, 'Style', 'pushbutton', ...
% %     'String', 'üõë Parar', ...
% %     'FontSize', 12, 'ForegroundColor', 'w', ...
% %     'BackgroundColor', [0.6 0.2 0.2], ...
% %     'Units', 'normalized', 'Position', [0.1 0.7 0.35 0.2], ...
% %     'Callback', @(~,~) setStopFlag(hFig));
% % 
% % % % Bot√£o: Executar an√°lise Python
% % % uicontrol(uipanelControls, 'Style', 'pushbutton', ...
% % %     'String', 'üìä An√°lise Estat√≠stica (Python)', ...
% % %     'FontSize', 12, 'ForegroundColor', 'w', ...
% % %     'BackgroundColor', [0.2 0.5 0.2], ...
% % %     'Units', 'normalized', 'Position', [0.55 0.7 0.35 0.2], ...
% % %     'Callback', @(~,~) runPythonAnalysis(outputDir));
% % 
% % % Terminal Output
% % txtTerminal = uicontrol(uipanelControls, 'Style', 'edit', ...
% %     'Max', 10, 'Min', 0, ...
% %     'Units', 'normalized', ...
% %     'Position', [0.05 0.05 0.9 0.6], ...
% %     'HorizontalAlignment', 'left', ...
% %     'FontSize', 9, ...
% %     'BackgroundColor', 'black', ...
% %     'ForegroundColor', 'green', ...
% %     'String', 'Terminal de Output...');
% % 
% % %% Iniciar processamento
% % updateTerminal(txtTerminal, '‚û°Ô∏è A iniciar an√°lise ROS...');
% % stopFlagHandle = @( ) getappdata(hFig, 'stopFlag');
% % 
% % mainROS_gui(imageTable, outputDir, axOrig, axOverlay, txtTerminal, stopFlagHandle);
% % 
% % updateTerminal(txtTerminal, '‚úÖ An√°lise ROS terminada.');
% % end
% 
% 
% % ENG VERSION
% function guiROS(imageTable, outputDir)
% %GUIROS - Interactive GUI for analysis and visualization of ROS microscopy images.
% %
% %   This interface supports:
% %     - Visualization of original microscopy images
% %     - Display of ROS overlays (total and diffuse)
% %     - Embedded output terminal for analysis messages
% %     - Stop button to interrupt processing
% %
% %   INPUTS:
% %       imageTable : Table with image paths and associated metadata
% %       outputDir  : Directory where results will be saved
% %
% %   AUTHOR:
% %       Prepared for scientific use by Ferreira, M., FCUL-IST, 2025
% 
% % --------------------- GUI INITIALIZATION ---------------------
% screenSize = get(0, 'ScreenSize');
% 
% % Create main GUI window
% hFig = figure('Name', 'ROS Analysis Viewer', ...
%               'NumberTitle', 'off', ...
%               'MenuBar', 'none', ...
%               'ToolBar', 'none', ...
%               'Color', [0.07 0.07 0.07], ...
%               'Position', screenSize, ...
%               'Units', 'pixels');
% 
% % Initialize stop flag storage
% handles = struct();
% handles.stopFlag = false;
% guidata(hFig, handles);
% 
% % --------------------- AXES AND PANELS -----------------------
% 
% %% Original image panel (top-left)
% axOrig = axes('Parent', hFig, ...
%               'Units', 'normalized', ...
%               'Position', [0.05 0.55 0.4 0.4]);
% title(axOrig, 'Original Image', 'Color', 'w');
% 
% %% ROS overlays panel (right side)
% axOverlay = axes('Parent', hFig, ...
%                  'Units', 'normalized', ...
%                  'Position', [0.5 0.2 0.45 0.75]);
% title(axOverlay, 'ROS Overlays (Total & Diffuse)', 'Color', 'w');
% 
% %% Control panel (bottom-left)
% uipanelControls = uipanel('Parent', hFig, ...
%     'Title', 'Control Panel', ...
%     'FontSize', 10, ...
%     'ForegroundColor', 'w', ...
%     'BackgroundColor', [0.15 0.15 0.15], ...
%     'Units', 'normalized', ...
%     'Position', [0.05 0.05 0.4 0.4]);
% 
% % Stop Button - allows user to interrupt ongoing analysis
% uicontrol(uipanelControls, 'Style', 'pushbutton', ...
%     'String', 'üõë Stop', ...
%     'FontSize', 12, ...
%     'ForegroundColor', 'w', ...
%     'BackgroundColor', [0.6 0.2 0.2], ...
%     'Units', 'normalized', ...
%     'Position', [0.1 0.7 0.35 0.2], ...
%     'Callback', @(~,~) setStopFlag(hFig));
% 
% % % Python analysis button (optional future use)
% % uicontrol(uipanelControls, 'Style', 'pushbutton', ...
% %     'String', 'üìä Run Python Analysis', ...
% %     'FontSize', 12, ...
% %     'ForegroundColor', 'w', ...
% %     'BackgroundColor', [0.2 0.5 0.2], ...
% %     'Units', 'normalized', ...
% %     'Position', [0.55 0.7 0.35 0.2], ...
% %     'Callback', @(~,~) runPythonAnalysis(outputDir));
% 
% % Terminal Output (bottom text area)
% txtTerminal = uicontrol(uipanelControls, 'Style', 'edit', ...
%     'Max', 10, 'Min', 0, ...                      % Multi-line enabled
%     'Units', 'normalized', ...
%     'Position', [0.05 0.05 0.9 0.6], ...
%     'HorizontalAlignment', 'left', ...
%     'FontSize', 9, ...
%     'BackgroundColor', 'black', ...
%     'ForegroundColor', 'green', ...
%     'String', 'Output Terminal...');
% 
% % --------------------- RUN ANALYSIS ---------------------
% 
% % Display start message
% updateTerminal(txtTerminal, '‚û°Ô∏è Starting ROS analysis...');
% 
% % Create stop flag function handle (reads appdata dynamically)
% stopFlagHandle = @() getappdata(hFig, 'stopFlag');
% 
% % Call main ROS analysis function (includes live updates and GUI integration)
% mainROS_gui(imageTable, outputDir, axOrig, axOverlay, txtTerminal, stopFlagHandle);
% 
% % Final status message
% updateTerminal(txtTerminal, '‚úÖ ROS analysis completed.');
% end

function guiROS(imageTable,outputDir,assetsPath)
%GUIROS  Interactive GUI for ROS analysis with real‚Äëtime overlays.
%
%   AUTHOR:
%       Prepared for scientific use by Ferreira, M., FCUL-IST, 2025

%% (identical layout to guiLD, just change titles/colours as needed)
scr = get(0,'ScreenSize');
hFig = figure('Name','LiDRoSIS ‚Äë ROS Viewer', ...
        'NumberTitle','off','MenuBar','none','ToolBar','none', ...
        'Color',[0.06 0.06 0.1],'Position',scr.*[.05 .05 .9 .9]);

tg = uitabgroup('Parent',hFig,'Position',[0 0.15 1 0.85]);
tabOrig = uitab(tg,'Title','Original');
tabOver = uitab(tg,'Title','Overlays');
tabMetric = uitab(tg,'Title','Metrics');
axOrig   = axes('Parent',tabOrig,'Units','normalized','Position',[0 0 1 1]);
axOverlay= axes('Parent',tabOver,'Units','normalized','Position',[0 0 1 1]);
set(axOrig,   'Color', [0.08 0.08 0.10]);   % dark gray background
set(axOverlay,'Color', [0.08 0.08 0.10]);   % same background
txtMetrics = uitable(tabMetric,'Units','normalized','Position',[0 0 1 1]);

pCtrl = uipanel('Parent',hFig,'Units','normalized', ...
        'Position',[0 0 1 0.15],'BackgroundColor',[0.12 0.12 0.15]);
btnStop = uicontrol(pCtrl,'Style','pushbutton','String','üõë Stop', ...
        'Units','normalized','Position',[0.02 0.3 0.08 0.4], ...
        'FontSize',12,'BackgroundColor',[0.6 0.2 0.2],'ForegroundColor','w');
btnPy = uicontrol(pCtrl,'Style','pushbutton','String','üìä Python', ...
        'Enable','off','Units','normalized','Position',[0.12 0.3 0.08 0.4], ...
        'FontSize',12,'BackgroundColor',[0.2 0.5 0.2],'ForegroundColor','w');
progText = uicontrol(pCtrl,'Style','text','String','Progress: 0/0', ...
        'Units','normalized','Position',[0.22 0.35 0.15 0.3], ...
        'BackgroundColor','none','ForegroundColor','w','FontSize',11);
txtTerm = uicontrol(pCtrl,'Style','edit','Max',20,'Min',0, ...
        'Units','normalized','Position',[0.39 0.05 0.6 0.9], ...
        'BackgroundColor','black','ForegroundColor',[0.3 1 0.3], ...
        'FontName','Courier New','FontSize',9);

setappdata(hFig,'stopFlag',false);
btnStop.Callback=@(~,~) setappdata(hFig,'stopFlag',true);
stopFlagHandle = @() getappdata(hFig,'stopFlag');

updateTerminal(txtTerm,'‚û°Ô∏è  Starting ROS analysis...');
mainROS_gui(imageTable,outputDir,axOrig,axOverlay,txtTerm,stopFlagHandle,progText,txtMetrics);
updateTerminal(txtTerm,'‚úÖ  ROS analysis completed.');
btnPy.Enable='on';
end
